{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","components/NewMovie/NewMovieTypes.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","INITIAL_STATE","PropTypes","arrayOf","string","func","errors","uniqueImdbId","REGEXP_TITLE","REGEXP_DESCRIPTION","REGEXP_IMDBID","REGEXP_URL","NewMovie","state","checkUniqueImdbId","listImdbId","props","setState","includes","validate","regexp","event","target","name","value","push","match","test","handleSubmit","preventDefault","onAdd","handleChange","unlockSubmit","Object","values","some","error","length","handleOnBluer","this","keys","uuid","toUpperCase","type","placeholder","onBlur","onChange","disabled","onClick","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f386188.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","/* eslint-disable max-len */\nimport React, { Component } from 'react';\nimport uuid from 'uuid-random';\nimport { NewMovieTypes } from './NewMovieTypes';\n\nimport './NewMovie.scss';\n\nconst INITIAL_STATE = {\n  movie: {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  },\n  errors: {\n    title: [],\n    description: [],\n    imgUrl: [],\n    imdbUrl: [],\n    imdbId: [],\n  },\n  uniqueImdbId: true,\n};\nconst REGEXP_TITLE = /[^\\w0-9 ]+/g;\nconst REGEXP_DESCRIPTION = /[^A-Za-z0-9 \\n,'\"-.]+/g;\nconst REGEXP_IMDBID = /^tt([0-9]{6,}\\b)+/g;\nconst REGEXP_URL = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    movie: {\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    },\n    errors: {\n      title: [],\n      description: [],\n      imgUrl: [],\n      imdbUrl: [],\n      imdbId: [],\n    },\n    uniqueImdbId: true,\n  };\n\n  checkUniqueImdbId = () => {\n    const { listImdbId } = this.props;\n\n    this.setState(({ movie }) => ({\n      uniqueImdbId: !listImdbId.includes(movie.imdbId),\n    }));\n  }\n\n  validate = (regexp, event) => {\n    const { name, value } = event.target;\n    const errors = {\n      title: [],\n      description: [],\n      imgUrl: [],\n      imdbUrl: [],\n      imdbId: [],\n    };\n\n    if (value === '') {\n      errors[name].push(`Please enter ${name}`);\n    }\n\n    const test = (name === 'title' || name === 'description')\n      ? !value.match(regexp) : regexp.test(value);\n\n    if (!test && value !== '') {\n      errors[name].push('Special characters are not allowed');\n    }\n\n    this.setState(state => ({\n      errors: {\n        ...state.errors,\n        [name]: [...errors[name]],\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.props.onAdd(this.state.movie);\n    this.setState(INITIAL_STATE);\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(({ movie }) => ({\n      movie: {\n        ...movie,\n        [name]: value,\n      },\n    }));\n  }\n\n  unlockSubmit = () => {\n    const { errors, movie } = this.state;\n\n    return Object.values(errors).some(error => error.length > 0)\n      || Object.values(movie).some(value => value === '');\n  }\n\n  handleOnBluer = (event, key) => {\n    switch (event.target.name) {\n      case 'title':\n        this.validate(REGEXP_TITLE, event);\n        break;\n      case 'description':\n        this.validate(REGEXP_DESCRIPTION, event);\n        break;\n      case 'imgUrl':\n      case 'imdbUrl':\n        this.validate(REGEXP_URL, event);\n        break;\n      case 'imdbId':\n        this.validate(REGEXP_IMDBID, event);\n        break;\n      default:\n        break;\n    }\n\n    if (key === 'imdbId') {\n      this.checkUniqueImdbId();\n    }\n  }\n\n  render() {\n    const {\n      movie,\n      errors,\n      uniqueImdbId,\n    } = this.state;\n\n    return (\n      <form>\n        {Object.keys(movie).map(key => (\n          <div\n            className=\"container\"\n            key={uuid()}\n          >\n            <label>\n              {key.toUpperCase()}\n              <input\n                type=\"text\"\n                className={errors[key].length > 0 ? 'error-input' : ''}\n                name={key}\n                value={movie[key]}\n                placeholder={key.toUpperCase()}\n                onBlur={event => this.handleOnBluer(event, key)}\n                onChange={this.handleChange}\n              />\n            </label>\n            {key === 'imdbId'\n              ? (\n                <div className=\"example\">\n                  [Exp.: tt95430396016]\n                </div>\n              )\n              : null\n            }\n            <div className=\"error-message\">\n              { errors[key] }\n              {(!uniqueImdbId && key === 'imdbId') && 'This ImdbId also exist. Please enter new ImdbId'}\n            </div>\n          </div>\n        ))}\n\n        <input\n          type=\"submit\"\n          value=\"Add Movie\"\n          disabled={this.unlockSubmit()}\n          onClick={this.handleSubmit}\n        />\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = NewMovieTypes;\n","import PropTypes from 'prop-types';\n\nexport const NewMovieTypes = {\n  listImdbId: PropTypes.arrayOf(\n    PropTypes.string,\n  ),\n  onAdd: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            listImdbId={movies.map(movie => movie.imdbId)}\n            onAdd={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}