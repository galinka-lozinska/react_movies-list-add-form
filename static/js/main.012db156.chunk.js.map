{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","components/NewMovie/NewMovieTypes.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","INITIAL_STATE","PropTypes","arrayOf","string","func","errors","validTitle","emptyTitle","validDescription","emptyDescription","validImgUrl","emptyImgUrl","validImdbUrl","emptyImdbUrl","validImdbId","emptyImdbId","submitDisabled","uniqueImdbId","REGEXP_TITLE","REGEXP_DESCRIPTION","REGEXP_IMDBID","REGEXP_URL","NewMovie","state","checkUniqueImdbId","listImdbId","props","setState","includes","validateForm","validate","regexp","event","target","name","value","match","test","checkEmptyFailds","handleSubmit","preventDefault","onAdd","handleChange","split","letter","index","toLowerCase","join","handleDisabledSubmit","this","type","placeholder","style","borderColor","onBlur","onChange","disabled","onClick","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.012db156.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","/* eslint-disable max-len */\nimport React, { Component } from 'react';\nimport { NewMovieTypes } from './NewMovieTypes';\n\nimport './NewMovie.scss';\n\nconst INITIAL_STATE = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n  errors: {\n    validTitle: false,\n    emptyTitle: false,\n    validDescription: false,\n    emptyDescription: false,\n    validImgUrl: true,\n    emptyImgUrl: false,\n    validImdbUrl: true,\n    emptyImdbUrl: false,\n    validImdbId: true,\n    emptyImdbId: false,\n  },\n  submitDisabled: true,\n  uniqueImdbId: true,\n};\nconst REGEXP_TITLE = /[^\\w0-9 ]+/g;\nconst REGEXP_DESCRIPTION = /[^A-Za-z0-9 \\n,'\"-.]+/g;\nconst REGEXP_IMDBID = /^tt([0-9]{6,}\\b)+/g;\nconst REGEXP_URL = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: {\n      validTitle: false,\n      emptyTitle: false,\n      validDescription: false,\n      emptyDescription: false,\n      validImgUrl: true,\n      emptyImgUrl: false,\n      validImdbUrl: true,\n      emptyImdbUrl: false,\n      validImdbId: true,\n      emptyImdbId: false,\n    },\n    submitDisabled: true,\n    uniqueImdbId: true,\n  };\n\n  checkUniqueImdbId = () => {\n    const { listImdbId } = this.props;\n\n    this.setState(state => ({\n      uniqueImdbId: !listImdbId.includes(state.imdbId),\n    }));\n  }\n\n  validateForm = () => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errors,\n      uniqueImdbId,\n    } = this.state;\n\n    if (title && description && imgUrl && imdbUrl && imdbId) {\n      if (!errors.validTitle && !errors.validDescription\n      && errors.validImgUrl && errors.validImdbUrl\n      && errors.validImdbId && uniqueImdbId) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  validate = (regexp, event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      errors: {\n        ...state.errors,\n        [`valid${name}`]: (name === 'Title' || name === 'Description')\n          ? value.match(regexp) : regexp.test(value),\n      },\n    }));\n  }\n\n  checkEmptyFailds = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      errors: {\n        ...state.errors,\n        [`empty${name}`]: value === '',\n      },\n    }));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.validateForm()) {\n      this.props.onAdd(this.state);\n      this.setState(INITIAL_STATE);\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    const key = name.split('').map((letter, index) => {\n      if (index === 0) {\n        return letter.toLowerCase();\n      }\n\n      return letter;\n    }).join('');\n\n    this.setState({\n      [key]: value,\n    });\n  }\n\n  handleDisabledSubmit = () => {\n    if (this.validateForm()) {\n      this.setState({\n        submitDisabled: false,\n      });\n    }\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      errors,\n      submitDisabled,\n      uniqueImdbId,\n    } = this.state;\n\n    return (\n      <form>\n        <label>\n          Title\n          <input\n            type=\"text\"\n            name=\"Title\"\n            value={title}\n            placeholder=\"Title\"\n            style={{\n              borderColor: errors.emptyTitle || errors.validTitle ? 'red' : '',\n            }}\n            onBlur={(event) => {\n              this.checkEmptyFailds(event);\n              this.validate(REGEXP_TITLE, event);\n              this.handleDisabledSubmit();\n            }}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div className=\"error\">\n          {errors.emptyTitle && 'Please enter title'}\n          {errors.validTitle && 'Special characters are not allowed'}\n        </div>\n\n        <label>\n          Description\n          <textarea\n            name=\"Description\"\n            type=\"text\"\n            value={description}\n            placeholder=\"Description\"\n            style={{\n              borderColor: errors.emptyDescription || errors.validDescription ? 'red' : '',\n            }}\n            onBlur={(event) => {\n              this.validate(REGEXP_DESCRIPTION, event);\n              this.checkEmptyFailds(event);\n              this.handleDisabledSubmit();\n            }}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div className=\"error\">\n          {errors.emptyDescription && 'Please enter description'}\n          {errors.validDescription && 'Special characters are not allowed'}\n          {}\n        </div>\n\n        <label>\n          ImgUrl\n          <input\n            type=\"text\"\n            name=\"ImgUrl\"\n            value={imgUrl}\n            placeholder=\"ImgUrl\"\n            style={{\n              borderColor: errors.emptyImgUrl || !errors.validImgUrl ? 'red' : '',\n            }}\n            onBlur={(event) => {\n              this.validate(REGEXP_URL, event);\n              this.checkEmptyFailds(event);\n              this.handleDisabledSubmit();\n            }}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div className=\"error\">\n          {errors.emptyImgUrl && 'Please enter ImgUrl'}\n          {(!errors.validImgUrl && !errors.emptyImgUrl) && 'Special characters are not allowed'}\n        </div>\n\n        <label>\n          ImdbUrl\n          <input\n            type=\"text\"\n            name=\"ImdbUrl\"\n            value={imdbUrl}\n            placeholder=\"ImdbUrl\"\n            style={{\n              borderColor: errors.emptyImdbUrl || !errors.validImdbUrl ? 'red' : '',\n            }}\n            onBlur={(event) => {\n              this.checkEmptyFailds(event);\n              this.validate(REGEXP_URL, event);\n              this.handleDisabledSubmit();\n            }}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div className=\"error\">\n          {errors.emptyImdbUrl && 'Please enter ImdbUrl'}\n          {(!errors.validImdbUrl && !errors.emptyImdbUrl) && 'Special characters are not allowed'}\n        </div>\n\n        <label>\n          ImdbId\n          <input\n            type=\"text\"\n            name=\"ImdbId\"\n            value={imdbId}\n            placeholder=\"ImdbId\"\n            style={{\n              borderColor: errors.emptyImdbId || !errors.validImdbId ? 'red' : '',\n            }}\n            onBlur={(event) => {\n              this.validate(REGEXP_IMDBID, event);\n              this.checkEmptyFailds(event);\n              this.handleDisabledSubmit();\n              this.checkUniqueImdbId();\n            }}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div className=\"example\">\n          [Exp.: tt95430396016]\n        </div>\n        <div className=\"error\">\n          {errors.emptyImdbId && 'Please enter ImdbId'}\n          {(!errors.emptyImdbId && !errors.validImdbId) && 'Special characters are not allowed'}\n          {!uniqueImdbId && 'This ImdbId also exist. Please enter new ImdbId'}\n        </div>\n\n        <input\n          type=\"submit\"\n          value=\"Add Movie\"\n          disabled={submitDisabled}\n          onClick={this.handleSubmit}\n        />\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = NewMovieTypes;\n","import PropTypes from 'prop-types';\n\nexport const NewMovieTypes = {\n  listImdbId: PropTypes.arrayOf(\n    PropTypes.string,\n  ),\n  onAdd: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            listImdbId={movies.map(movie => movie.imdbId)}\n            onAdd={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}